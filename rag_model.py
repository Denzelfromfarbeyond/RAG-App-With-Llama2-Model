# -*- coding: utf-8 -*-
"""RAG Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fjui7-ytn7rThvnZM6PaVxji5Xh7IAe6
"""

pip install pypdf

pip install llama_index

pip install -q transformers einops accelerate langchain bitsandbytes

pip install python-dotenv

## Retrieval augmented generation

import os
from dotenv import load_dotenv
load_dotenv()

pip install llama-index-llms-huggingface

import logging
import sys

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))

from llama_index.core import VectorStoreIndex, SimpleDirectoryReader
from llama_index.llms.huggingface import HuggingFaceLLM
from llama_index.core import Settings
from llama_index.core.prompts.prompts import SimpleInputPrompt

pip install llama-index-llms-openai

pip install llama-index-embeddings-openai

pip install llama-index-graph-stores-nebula

pip install llama-index-llms-azure-openai

os.environ['OPENAI_API_KEY']=os.getenv("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")

#from llama_index import VectorStoreIndex,SimpleDirectoryReader
documents=SimpleDirectoryReader("/content/data").load_data()

documents

index=VectorStoreIndex.from_documents(documents,show_progress=True)

index

query_engine=index.as_query_engine()

from llama_index.retrievers import VectorIndexRetriever
from llama_index.query_engine import RetrieverQueryEngine
from llama_index.indices.postprocessor import SimilarityPostprocessor

retriever=VectorIndexRetriever(index=index,similarity_top_k=4)
postprocessor=SimilarityPostprocessor(similarity_cutoff=0.80)

query_engine=RetrieverQueryEngine(retriever=retriever,
                                  node_postprocessors=[postprocessor])

response=query_engine.query("")

from llama_index.response.pprint_utils import pprint_response
pprint_response(response,show_source=True)
print(response)

import os.path
from llama_index import (
    VectorStoreIndex,
    SimpleDirectoryReader,
    StorageContext,
    load_index_from_storage,
)

# check if storage already exists
PERSIST_DIR = "./storage"
if not os.path.exists(PERSIST_DIR):
    # load the documents and create the index
    documents = SimpleDirectoryReader("data").load_data()
    index = VectorStoreIndex.from_documents(documents)
    # store it for later
    index.storage_context.persist(persist_dir=PERSIST_DIR)
else:
    # load the existing index
    storage_context = StorageContext.from_defaults(persist_dir=PERSIST_DIR)
    index = load_index_from_storage(storage_context)

# either way we can now query the index
query_engine = index.as_query_engine()
response = query_engine.query("What are transformers?")
print(response)

